#!/bin/bash

# Run package build within a virgin Ubuntu/Debian container.

set -o errexit
set -o pipefail
set -o nounset

# there is no VERSION_ID in sid/bullseye
VERSION_ID="11"
VERSION="11 (bullseye)"
. /etc/os-release

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd ${SCRIPTDIR}/../..

export DEBIAN_FRONTEND=noninteractive
apt-get update > /dev/null
apt-get --no-install-recommends -y install sudo > /dev/null

TESTUSER=ediuser
TESTUSERHOME=/home/${TESTUSER}
adduser --disabled-password --gecos "" ${TESTUSER}
addgroup  ${TESTUSER} adm

apt-get --no-install-recommends -y install git > /dev/null

git config --system user.email "lueschem@gmail.com"
git config --system user.name "Matthias Luescher"

if ! git diff --exit-code --quiet
then
    >&2 echo "Error: there are unstaged changes!"
    exit 1
fi

if ! git diff --cached --exit-code --quiet
then
    >&2 echo "Error: there are uncommitted changes!"
    exit 1
fi

sudo -u ${TESTUSER} git clone .git ${TESTUSERHOME}/edi

apt-get -y --no-install-recommends install git-buildpackage dh-make equivs lintian > /dev/null

CONTAINER_WORK="${TESTUSERHOME}/edi"
cd ${CONTAINER_WORK}

RAW_VERSION="$(dpkg-parsechangelog --show-field Version | cut -d'+' -f1)"

if [ "${ID}" == "ubuntu" ]
then
    NEW_VERSION="${RAW_VERSION}+u$(echo ${VERSION_ID} | sed s#\\.##g)"
elif [ "${ID}" == "debian" ]
then
    NEW_VERSION="${RAW_VERSION}+deb$(echo ${VERSION_ID} | sed s#\\.##g)"
    VERSION_CODENAME=$(echo ${VERSION} | awk -F"[)(]+" '{print $2}')
else
    >&2 echo "Error: unhandled operating system id (${ID})!"
    exit 1
fi

GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "${GIT_BRANCH}" != "master" ]
then
    NEW_VERSION="${NEW_VERSION}$(git describe --always --tags 2>/dev/null | sed -r s/^v//g | sed -r 's/[0-9]+.[0-9]+.[0-9]+-([0-9]+)-(.*)/r\1\2/g')"
fi

SETUP_PY="setup.py"
sed -i "s/^    version=.*/    version='${NEW_VERSION}',/g" ${SETUP_PY}
sudo -u ${TESTUSER} git add ${SETUP_PY}

SPHINX_CONFIG="docs/conf.py"
sed -i "s/^version =.*/version = '${NEW_VERSION}'/g" ${SPHINX_CONFIG}
sed -i "s/^release =.*/release = '${NEW_VERSION}'/g" ${SPHINX_CONFIG}
sudo -u ${TESTUSER} git add ${SPHINX_CONFIG}

VERSION_HELPERS="edi/lib/versionhelpers.py"
sed -i "s/^edi_fallback_version =.*/edi_fallback_version = '${NEW_VERSION}'/g" ${VERSION_HELPERS}
sudo -u ${TESTUSER} git add ${VERSION_HELPERS}

dch -b --newversion ${NEW_VERSION} --distribution ${VERSION_CODENAME} -m "Automatic ${VERSION_CODENAME} build."

sudo -u ${TESTUSER} git add debian/changelog
sudo -u ${TESTUSER} git commit -m "New version ${NEW_VERSION}."
sudo -u ${TESTUSER} git tag -a v${NEW_VERSION} -m "New version ${NEW_VERSION}."

mk-build-deps -i debian/control -t "apt-get -y" > /dev/null

sudo -u ${TESTUSER} py.test-3

sudo -u ${TESTUSER} git clean -dxf

sudo -u ${TESTUSER} debuild -us -uc > /dev/null

dpkg -i ../edi_*_all.deb || true
apt-get -y --no-install-recommends install -f

EDIVERSION=$(edi version)
CHANGELOGVERSION=$(dpkg-parsechangelog --show-field Version)

if [ "${EDIVERSION}" != "${CHANGELOGVERSION}" ]
then
    >&2 echo -e "\nError: edi version does not match changelog version (${EDIVERSION} != ${CHANGELOGVERSION})."
    exit 1
fi

if [ "${ID}" == "ubuntuXXX" ]
then
    GPG_MAJOR_VERSION=$(gpg --version | head -n1 | cut -d' ' -f3 | cut -d'.' -f1)

    GPG_OPTIONS="--pinentry-mode loopback"
    if [ "${GPG_MAJOR_VERSION}" == "1" ]
    then
        GPG_OPTIONS="--batch --yes --no-use-agent"
    fi

    GPG_ARCHIVE="${SCRIPTDIR}/travis-key.tar"

    if [ ! -f "${GPG_ARCHIVE}" ]
    then
        >&2 echo -e "\nError: Missing credential archive ${GPG_ARCHIVE}."
        exit 1
    fi

    sudo -u ${TESTUSER} git clean -dxf
    sudo -u ${TESTUSER} tar -xf ${GPG_ARCHIVE} -C ${CONTAINER_WORK}/travis/

    GPG_KEY="${CONTAINER_WORK}/travis/travis-key.asc"
    GPG_KEY_PASSPHRASE="${CONTAINER_WORK}/travis/travis-key.passphrase"
    gpg ${GPG_OPTIONS} --passphrase-file ${GPG_KEY_PASSPHRASE} --import ${GPG_KEY}

    sudo -u ${TESTUSER} debuild -S -us -uc > /dev/null

    RESULT="${CONTAINER_WORK}/../edi_${NEW_VERSION}_source.changes"
    debsign -p"gpg ${GPG_OPTIONS} --passphrase-file ${GPG_KEY_PASSPHRASE}" -S -kB6D5610F601C6B6E4A880C93AA6945FE5AAFB25D ${RESULT}

    GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [ "${GIT_BRANCH}" == "master" ]
    then
        apt-get --no-install-recommends -y install openssh-client dput locales python3-paramiko > /dev/null
        locale-gen en_US.UTF-8
        export LANG=en_US.UTF-8

        SSH_FOLDER=/root/.ssh
        mkdir ${SSH_FOLDER}
        chmod 0700 ${SSH_FOLDER}

        cp ${CONTAINER_WORK}/travis/id_rsa ${SSH_FOLDER}/
        cp ${CONTAINER_WORK}/travis/id_rsa.pub ${SSH_FOLDER}/
        cp ${CONTAINER_WORK}/travis/known_hosts ${SSH_FOLDER}/
        chmod -R 0600 ${SSH_FOLDER}/*

        ssh-keyscan ppa.launchpad.net >> ${SSH_FOLDER}/known_hosts

        dput --unchecked --config ${CONTAINER_WORK}/travis/dput.cf ppa:m-luescher/edi-snapshots ${RESULT}
    else
        echo "Skipping deployment on ${GIT_BRANCH} branch."
    fi
else
    BUILD_OUTPUT="${SCRIPTDIR}/../../"
    cp -f ../edi_${NEW_VERSION}* ${BUILD_OUTPUT}
fi

echo "========"
echo "Success!"
echo "========"
